<template>
  <div class="admin-page">
    <div class="admin-header">
      <h1>관리자 페이지</h1>
      <p>시스템 관리 및 사용자 관리를 수행하세요</p>
    </div>

    <el-tabs v-model="activeTab" class="admin-tabs">
      <!-- 시스템 통계 탭 -->
      <el-tab-pane label="시스템 통계" name="stats">
        <div class="stats-section">
          <div class="stats-cards">
            <el-card class="stat-card">
              <div class="stat-content">
                <div class="stat-icon users">
                  <el-icon><User /></el-icon>
                </div>
                <div class="stat-info">
                  <div class="stat-value">{{ stats.total_users }}</div>
                  <div class="stat-label">전체 사용자</div>
                </div>
              </div>
            </el-card>

            <el-card class="stat-card">
              <div class="stat-content">
                <div class="stat-icon approved">
                  <el-icon><Check /></el-icon>
                </div>
                <div class="stat-info">
                  <div class="stat-value">{{ stats.approved_users }}</div>
                  <div class="stat-label">승인된 사용자</div>
                </div>
              </div>
            </el-card>

            <el-card class="stat-card">
              <div class="stat-content">
                <div class="stat-icon pending">
                  <el-icon><Clock /></el-icon>
                </div>
                <div class="stat-info">
                  <div class="stat-value">{{ stats.pending_users }}</div>
                  <div class="stat-label">승인 대기</div>
                </div>
              </div>
            </el-card>

            <el-card class="stat-card">
              <div class="stat-content">
                <div class="stat-icon workflows">
                  <el-icon><Document /></el-icon>
                </div>
                <div class="stat-info">
                  <div class="stat-value">{{ stats.total_workflows }}</div>
                  <div class="stat-label">워크플로우</div>
                </div>
              </div>
            </el-card>

            <el-card class="stat-card">
              <div class="stat-content">
                <div class="stat-icon executions">
                  <el-icon><Monitor /></el-icon>
                </div>
                <div class="stat-info">
                  <div class="stat-value">{{ stats.total_executions }}</div>
                  <div class="stat-label">실행 기록</div>
                </div>
              </div>
            </el-card>
          </div>
        </div>
      </el-tab-pane>

      <!-- 사용자 관리 탭 -->
      <el-tab-pane label="사용자 관리" name="users">
        <div class="users-section">
          <div class="section-header">
            <el-button type="primary" @click="showCreateUserDialog = true">
              <el-icon><Plus /></el-icon>
              사용자 추가
            </el-button>
            <el-button @click="loadUsers">
              <el-icon><Refresh /></el-icon>
              새로고침
            </el-button>
          </div>

          <el-table :data="users" style="width: 100%" v-loading="loading.users">
            <el-table-column prop="id" label="ID" width="80" />
            <el-table-column prop="username" label="사용자명" />
            <el-table-column prop="email" label="이메일" />
            <el-table-column prop="role" label="역할">
              <template #default="scope">
                <el-tag :type="scope.row.role === 'admin' ? 'danger' : 'primary'">
                  {{ scope.row.role === 'admin' ? '관리자' : '사용자' }}
                </el-tag>
              </template>
            </el-table-column>
            <el-table-column prop="is_approved" label="승인 상태">
              <template #default="scope">
                <el-tag :type="scope.row.is_approved ? 'success' : 'warning'">
                  {{ scope.row.is_approved ? '승인됨' : '승인 대기' }}
                </el-tag>
              </template>
            </el-table-column>
            <el-table-column prop="created_at" label="가입일">
              <template #default="scope">
                {{ formatDate(scope.row.created_at) }}
              </template>
            </el-table-column>
            <el-table-column label="작업" width="200">
              <template #default="scope">
                <el-button size="small" @click="editUser(scope.row)">
                  편집
                </el-button>
                <el-button 
                  size="small" 
                  type="danger" 
                  @click="deleteUser(scope.row)"
                  :disabled="scope.row.role === 'admin'"
                >
                  삭제
                </el-button>
              </template>
            </el-table-column>
          </el-table>
        </div>
      </el-tab-pane>

             <!-- 워크플로우 관리 탭 -->
       <el-tab-pane label="워크플로우 관리" name="workflows">
         <div class="workflows-section">
                      <!-- 워크플로우 생성 섹션 제거됨 - 이제 팝업으로 이동 -->
           
           <div class="section-header">
             <div class="search-controls">
               <el-input
                 v-model="workflowSearch"
                 placeholder="워크플로우 검색..."
                 style="width: 300px"
                 @input="filterWorkflows"
               >
                 <template #prefix>
                   <el-icon><Search /></el-icon>
                 </template>
               </el-input>
               
               <el-select v-model="workflowStatusFilter" placeholder="상태 필터" style="width: 150px; margin-left: 10px">
                 <el-option label="전체" value="" />
                 <el-option label="활성화" value="active" />
                 <el-option label="비활성화" value="inactive" />
               </el-select>
             </div>
             
                           <div class="action-controls">
                                 <!-- 선택된 워크플로우 일괄 작업 버튼들 -->
                 <div class="bulk-action-buttons" v-if="selectedWorkflows.length > 0">
                   <el-badge :value="selectedWorkflows.length" :max="99" type="danger">
                     <el-button size="small" type="danger" @click="bulkDeleteWorkflows">
                       <el-icon><Delete /></el-icon>
                       선택 삭제
                     </el-button>
                   </el-badge>
                 </div>
                 
                 <!-- 기본 작업 버튼들 -->
                 <div class="default-action-buttons" v-if="selectedWorkflows.length === 0">
                   <el-button type="primary" @click="showCreateWorkflowDialog = true">
                     <el-icon><Plus /></el-icon>
                     새 워크플로우
                   </el-button>
                   
                   <el-button @click="loadWorkflows">
                     <el-icon><Refresh /></el-icon>
                     새로고침
                   </el-button>
                 </div>
              </div>
           </div>

          <el-table 
            :data="filteredWorkflows" 
            style="width: 100%" 
            v-loading="loading.workflows"
            @selection-change="handleWorkflowSelection"
          >
            <el-table-column type="selection" width="55" />
            <el-table-column prop="id" label="ID" width="80" sortable />
            
            <el-table-column prop="name" label="워크플로우명" min-width="200">
              <template #default="scope">
                <div class="workflow-name-cell">
                  <span class="workflow-name">{{ scope.row.name }}</span>
                  <el-tag v-if="scope.row.is_public" size="small" type="success">공개</el-tag>
                </div>
              </template>
            </el-table-column>
            
            <el-table-column prop="description" label="설명" min-width="250" show-overflow-tooltip />
            
            <el-table-column prop="owner" label="소유자" width="120">
              <template #default="scope">
                <div class="owner-cell">
                  <el-avatar :size="24" style="margin-right: 8px">
                    {{ scope.row.owner ? scope.row.owner.charAt(0).toUpperCase() : 'U' }}
                  </el-avatar>
                  <span>{{ scope.row.owner || '알 수 없음' }}</span>
                </div>
              </template>
            </el-table-column>
            
            <el-table-column prop="executions_count" label="실행 횟수" width="100" sortable align="center">
              <template #default="scope">
                <div class="badge-container">
                  <el-badge :value="scope.row.executions_count || 0" :max="999" type="primary">
                    <el-icon><Monitor /></el-icon>
                  </el-badge>
                </div>
              </template>
            </el-table-column>
            
            <el-table-column prop="last_executed" label="마지막 실행" width="150">
              <template #default="scope">
                <span v-if="scope.row.last_executed">
                  {{ formatDate(scope.row.last_executed) }}
                </span>
                <span v-else style="color: #999">실행 안 됨</span>
              </template>
            </el-table-column>
            
            <el-table-column prop="created_at" label="생성일" width="150" sortable>
              <template #default="scope">
                {{ formatDate(scope.row.created_at) }}
              </template>
            </el-table-column>
            
              <el-table-column label="작업" width="200" fixed="right">
                <template #default="scope">
                  <div class="workflow-actions">
                    <el-button size="small" @click="viewWorkflowDetails(scope.row)">
                      <el-icon><View /></el-icon>
                      상세
                    </el-button>
                    <el-button 
                      size="small" 
                      type="warning" 
                      @click="editWorkflowHandler(scope.row)"
                    >
                      <el-icon><Edit /></el-icon>
                      수정
                    </el-button>
                    <el-button 
                      size="small" 
                      type="danger" 
                      @click="deleteWorkflow(scope.row.id)"
                    >
                      <el-icon><Delete /></el-icon>
                      삭제
                    </el-button>
                  </div>
                </template>
              </el-table-column>
          </el-table>

          

                                <!-- 페이지네이션 -->
           <div class="pagination-wrapper" style="margin-top: 20px; text-align: center">
             <el-pagination
               v-model:current-page="workflowPagination.currentPage"
               v-model:page-size="workflowPagination.pageSize"
               :page-sizes="[10, 20, 50, 100]"
               :total="workflowPagination.total"
               layout="total, sizes, prev, pager, next"
               @size-change="handleWorkflowPageSizeChange"
               @current-change="handleWorkflowPageChange"
             />
           </div>
        </div>
      </el-tab-pane>

      <!-- 실행 기록 관리 탭 -->
      <el-tab-pane label="실행 기록" name="executions">
        <div class="executions-section">
          <div class="section-header">
            <el-button @click="loadExecutions">
              <el-icon><Refresh /></el-icon>
              새로고침
            </el-button>
          </div>

          <el-table :data="executions" style="width: 100%" v-loading="loading.executions">
            <el-table-column prop="id" label="ID" width="80" />
            <el-table-column prop="workflow_id" label="워크플로우 ID" width="120" />
            <el-table-column prop="status" label="상태">
              <template #default="scope">
                <el-tag :type="getStatusType(scope.row.status)">
                  {{ getStatusText(scope.row.status) }}
                </el-tag>
              </template>
            </el-table-column>
            <el-table-column prop="created_at" label="실행일">
              <template #default="scope">
                {{ formatDate(scope.row.created_at) }}
              </template>
            </el-table-column>
            <el-table-column label="작업" width="120">
              <template #default="scope">
                <el-button 
                  size="small" 
                  type="danger" 
                  @click="deleteExecution(scope.row.id)"
                >
                  삭제
                </el-button>
              </template>
            </el-table-column>
          </el-table>
        </div>
      </el-tab-pane>
    </el-tabs>

    <!-- 사용자 편집 다이얼로그 -->
    <el-dialog v-model="showEditUserDialog" title="사용자 편집" width="500px">
      <el-form :model="editingUser" label-width="100px">
        <el-form-item label="사용자명">
          <el-input v-model="editingUser.username" disabled />
        </el-form-item>
        <el-form-item label="이메일">
          <el-input v-model="editingUser.email" disabled />
        </el-form-item>
        <el-form-item label="역할">
          <el-select v-model="editingUser.role">
            <el-option label="사용자" value="user" />
            <el-option label="관리자" value="admin" />
          </el-select>
        </el-form-item>
        <el-form-item label="승인 상태">
          <el-switch v-model="editingUser.is_approved" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="showEditUserDialog = false">취소</el-button>
        <el-button type="primary" @click="saveUserChanges">저장</el-button>
      </template>
    </el-dialog>

    <!-- 워크플로우 상세 정보 다이얼로그 -->
    <el-dialog v-model="showWorkflowDetailDialog" title="워크플로우 상세 정보" width="80%" top="5vh">
      <div v-if="selectedWorkflowDetail" class="workflow-detail-content">
        <el-row :gutter="20">
          <el-col :span="12">
            <el-card header="기본 정보">
              <el-descriptions :column="1" border>
                <el-descriptions-item label="ID">{{ selectedWorkflowDetail.id }}</el-descriptions-item>
                <el-descriptions-item label="이름">{{ selectedWorkflowDetail.name }}</el-descriptions-item>
                <el-descriptions-item label="설명">{{ selectedWorkflowDetail.description || '설명 없음' }}</el-descriptions-item>
                <el-descriptions-item label="소유자">{{ selectedWorkflowDetail.owner || '알 수 없음' }}</el-descriptions-item>
                <el-descriptions-item label="생성일">{{ formatDate(selectedWorkflowDetail.created_at) }}</el-descriptions-item>
                <el-descriptions-item label="수정일">{{ formatDate(selectedWorkflowDetail.updated_at) }}</el-descriptions-item>
              </el-descriptions>
            </el-card>
          </el-col>
          
          <el-col :span="12">
            <el-card header="실행 통계">
              <el-row :gutter="10">
                <el-col :span="12">
                  <div class="stat-item">
                    <div class="stat-number">{{ selectedWorkflowDetail.executions_count || 0 }}</div>
                    <div class="stat-label">총 실행 횟수</div>
                  </div>
                </el-col>
                <el-col :span="12">
                  <div class="stat-item">
                    <div class="stat-number">{{ selectedWorkflowDetail.success_rate || '0%' }}</div>
                    <div class="stat-label">성공률</div>
                  </div>
                </el-col>
              </el-row>
              
              <el-divider />
              
              <div v-if="selectedWorkflowDetail.last_executed">
                <div class="stat-label">마지막 실행</div>
                <div>{{ formatDate(selectedWorkflowDetail.last_executed) }}</div>
              </div>
              <div v-else>
                <el-empty description="실행 기록이 없습니다" :image-size="80" />
              </div>
            </el-card>
          </el-col>
        </el-row>
        
        <!-- 입력 필드 정보 -->
         <el-row style="margin-top: 20px" v-if="selectedWorkflowDetail.input_fields && Object.keys(selectedWorkflowDetail.input_fields).length > 0">
           <el-col :span="24">
             <el-card header="입력 필드 설정">
               <div class="input-fields-info">
                 <el-tag type="info" size="small" style="margin-bottom: 16px">
                   {{ Object.keys(selectedWorkflowDetail.input_fields).length }}개 입력 필드
                 </el-tag>
                 
                 <div class="field-list">
                   <div v-for="(fieldConfig, placeholder) in selectedWorkflowDetail.input_fields" :key="placeholder" class="field-item">
                     <el-card class="field-card" size="small">
                       <div class="field-info">
                         <div class="field-header">
                           <el-tag size="small">{{ placeholder }}</el-tag>
                           <el-tag :type="getFieldTypeColor(fieldConfig.type)" size="small">{{ getFieldTypeLabel(fieldConfig.type) }}</el-tag>
                         </div>
                         <div class="field-details">
                           <p><strong>필드명:</strong> {{ fieldConfig.label || placeholder.replace(/[\[\]]/g, '') }}</p>
                           <p v-if="fieldConfig.description"><strong>설명:</strong> {{ fieldConfig.description }}</p>
                           <p><strong>기본값:</strong> {{ fieldConfig.defaultValue || '없음' }}</p>
                           <p v-if="fieldConfig.required"><strong>필수:</strong> {{ fieldConfig.required ? '예' : '아니오' }}</p>
                           <div v-if="fieldConfig.type === 'select' && fieldConfig.options" class="select-options-display">
                             <strong>선택 옵션:</strong>
                             <div class="options-tags">
                               <el-tag v-for="option in fieldConfig.options" :key="option.value" size="small" style="margin: 2px">
                                 {{ option.label }} ({{ option.value }})
                               </el-tag>
                             </div>
                           </div>
                           <div v-if="['number', 'float'].includes(fieldConfig.type)" class="number-constraints-display">
                             <strong>범위:</strong>
                             <span>{{ fieldConfig.min || '제한없음' }} ~ {{ fieldConfig.max || '제한없음' }}</span>
                             <span v-if="fieldConfig.type === 'float'"> (단계: {{ fieldConfig.step || '0.1' }})</span>
                           </div>
                         </div>
                       </div>
                     </el-card>
                   </div>
                 </div>
               </div>
             </el-card>
           </el-col>
         </el-row>

         <el-row style="margin-top: 20px">
           <el-col :span="24">
             <el-card header="워크플로우 JSON 데이터">
               <div class="json-viewer">
                 <el-button size="small" @click="copyWorkflowData" style="margin-bottom: 10px">
                   <el-icon><CopyDocument /></el-icon>
                   JSON 복사
                 </el-button>
                 <pre class="json-content">{{ formatJSON(selectedWorkflowDetail.workflow_data) }}</pre>
               </div>
             </el-card>
           </el-col>
         </el-row>
        
        <el-row style="margin-top: 20px">
          <el-col :span="24">
            <el-card header="최근 실행 기록">
              <el-table :data="workflowExecutions" style="width: 100%" max-height="300">
                <el-table-column prop="id" label="실행 ID" width="100" />
                <el-table-column prop="status" label="상태" width="100">
                  <template #default="scope">
                    <el-tag :type="getStatusType(scope.row.status)">
                      {{ getStatusText(scope.row.status) }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="started_at" label="시작 시간" width="180">
                  <template #default="scope">
                    {{ scope.row.started_at ? formatDate(scope.row.started_at) : '-' }}
                  </template>
                </el-table-column>
                <el-table-column prop="completed_at" label="완료 시간" width="180">
                  <template #default="scope">
                    {{ scope.row.completed_at ? formatDate(scope.row.completed_at) : '-' }}
                  </template>
                </el-table-column>
                <el-table-column prop="error_message" label="에러 메시지" show-overflow-tooltip>
                  <template #default="scope">
                    {{ scope.row.error_message || '-' }}
                  </template>
                </el-table-column>
              </el-table>
            </el-card>
          </el-col>
        </el-row>
      </div>
      
      <template #footer>
         <el-button @click="showWorkflowDetailDialog = false">닫기</el-button>
         <el-button type="danger" @click="deleteWorkflow(selectedWorkflowDetail.id)">
           <el-icon><Delete /></el-icon>
           삭제
         </el-button>
       </template>
    </el-dialog>

    <!-- 워크플로우 수정 다이얼로그 -->
    <el-dialog v-model="showEditWorkflowDialog" :title="`워크플로우 수정: ${editWorkflow.name}`" width="90%" top="3vh">
      <div class="edit-workflow-content">
        <el-form :model="editWorkflow" :rules="workflowFormRules" ref="editWorkflowFormRef" label-width="120px">
          <el-form-item label="워크플로우명" prop="name">
            <el-input 
              v-model="editWorkflow.name" 
              placeholder="워크플로우 이름을 입력하세요"
              maxlength="255"
              show-word-limit
            />
          </el-form-item>

          <el-form-item label="설명" prop="description">
            <el-input 
              v-model="editWorkflow.description" 
              type="textarea" 
              :rows="3"
              placeholder="워크플로우 설명을 입력하세요 (선택사항)"
              maxlength="500"
              show-word-limit
            />
          </el-form-item>

          <el-form-item label="워크플로우 데이터" prop="workflow_data">
            <div class="json-editor-container">
              <div class="json-editor-header">
                <span>ComfyUI JSON 데이터</span>
                <div class="json-actions">
                  <el-button size="small" @click="formatEditJson">
                    <el-icon><Document /></el-icon>
                    포맷팅
                  </el-button>
                  <el-button size="small" @click="validateEditJson">
                    <el-icon><CircleCheck /></el-icon>
                    검증
                  </el-button>
                  <el-button size="small" @click="copyEditToClipboard">
                    <el-icon><CopyDocument /></el-icon>
                    클립보드로 복사
                  </el-button>
                  <el-button size="small" @click="triggerEditFileUpload">
                    <el-icon><Upload /></el-icon>
                    파일 선택
                  </el-button>
                </div>
              </div>
              
              <!-- 드래그앤드롭 영역 -->
              <div 
                class="json-drop-zone"
                :class="{ 'is-dragover': editIsDragOver }"
                @drop="handleEditFileDrop"
                @dragover.prevent="handleEditDragOver"
                @dragenter.prevent="handleEditDragEnter"
                @dragleave="handleEditDragLeave"
              >
                <el-input 
                  v-model="editWorkflowJsonText" 
                  type="textarea" 
                  :rows="12"
                  placeholder='{"prompt": {...}, "nodes": {...}} 형식의 ComfyUI 워크플로우 JSON을 입력하거나 JSON 파일을 드래그하세요'
                  class="json-editor"
                  @input="validateEditWorkflowJson"
                />
                
                <!-- 드래그 오버레이 -->
                <div v-if="editIsDragOver" class="drag-overlay">
                  <div class="drag-content">
                    <el-icon class="drag-icon"><Upload /></el-icon>
                    <p>JSON 파일을 여기에 놓으세요</p>
                  </div>
                </div>
              </div>
              
              <!-- 숨겨진 파일 입력 -->
              <input 
                ref="editFileInputRef"
                type="file" 
                accept=".json"
                style="display: none"
                @change="handleEditFileSelect"
              />
              
              <div class="json-status" :class="editWorkflowJsonValidationStatus.type">
                <el-icon v-if="editWorkflowJsonValidationStatus.type === 'success'"><CircleCheck /></el-icon>
                <el-icon v-else-if="editWorkflowJsonValidationStatus.type === 'error'"><CircleClose /></el-icon>
                <el-icon v-else><Warning /></el-icon>
                <span>{{ editWorkflowJsonValidationStatus.message }}</span>
              </div>
            </div>
          </el-form-item>

          <!-- 입력 필드 설정 섹션 -->
          <el-form-item>
            <el-card class="input-fields-card">
              <template #header>
                <div class="card-header">
                  <span>입력 필드 설정</span>
                  <div class="field-controls">
                    <el-tag type="info" size="small">{{ editManualInputFields.length }}개 필드</el-tag>
                    <el-button size="small" type="primary" @click="addEditInputField">
                      <el-icon><Plus /></el-icon>
                      입력 필드 추가
                    </el-button>
                  </div>
                </div>
              </template>

              <div class="input-fields-list">
                <div v-if="editManualInputFields.length === 0" class="no-fields-message">
                  <el-empty description="입력 필드가 없습니다">
                    <template #image>
                      <el-icon size="60"><DocumentAdd /></el-icon>
                    </template>
                    <el-button type="primary" @click="addEditInputField">첫 번째 입력 필드 추가</el-button>
                  </el-empty>
                </div>
                
                <div v-for="(field, index) in editManualInputFields" :key="field.id" class="input-field-item">
                  <el-card class="field-config-card">
                    <template #header>
                      <div class="field-header">
                        <div class="field-id-section">
                          <el-tag type="success">{{ field.id }}</el-tag>
                          <el-button 
                            size="small" 
                            type="info" 
                            text 
                            @click="copyEditFieldId(field.id)"
                            title="field-id 복사"
                          >
                            <el-icon><DocumentCopy /></el-icon>
                          </el-button>
                        </div>
                        <el-button size="small" type="danger" @click="removeEditInputField(index)">
                          <el-icon><Delete /></el-icon>
                        </el-button>
                      </div>
                    </template>

                    <el-row :gutter="16">
                      <el-col :span="8">
                        <el-form-item label="필드명" size="small">
                          <el-input 
                            v-model="editInputFieldsConfig[field.id].label" 
                            placeholder="사용자에게 표시될 필드명"
                          />
                        </el-form-item>
                      </el-col>
                      
                      <el-col :span="8">
                        <el-form-item label="입력 타입" size="small">
                          <el-select 
                            v-model="editInputFieldsConfig[field.id].type" 
                            @change="onEditFieldTypeChange(field.id)"
                          >
                            <el-option label="텍스트" value="text" />
                            <el-option label="텍스트 박스" value="textarea" />
                            <el-option label="숫자" value="number" />
                            <el-option label="소수" value="float" />
                            <el-option label="선택" value="select" />
                          </el-select>
                        </el-form-item>
                      </el-col>
                      
                      <el-col :span="8">
                        <el-form-item label="기본값" size="small">
                          <el-input 
                            v-if="editInputFieldsConfig[field.id].type !== 'select'"
                            v-model="editInputFieldsConfig[field.id].defaultValue" 
                            :type="getEditInputType(editInputFieldsConfig[field.id].type)"
                            placeholder="기본값 입력"
                          />
                          <el-select 
                            v-else
                            v-model="editInputFieldsConfig[field.id].defaultValue"
                            placeholder="기본 선택값"
                          >
                            <el-option 
                              v-for="option in editInputFieldsConfig[field.id].options" 
                              :key="option.value" 
                              :label="option.label" 
                              :value="option.value"
                            />
                          </el-select>
                        </el-form-item>
                      </el-col>
                    </el-row>

                    <!-- Select 타입일 때 옵션 설정 -->
                    <div v-if="editInputFieldsConfig[field.id].type === 'select'" class="select-options">
                      <el-form-item label="선택 옵션" size="small">
                        <div class="options-list">
                          <div v-for="(option, optIndex) in editInputFieldsConfig[field.id].options" :key="optIndex" class="option-item">
                            <el-input 
                              v-model="option.label" 
                              placeholder="표시명" 
                              style="width: 45%; margin-right: 8px"
                            />
                            <el-input 
                              v-model="option.value" 
                              placeholder="값" 
                              style="width: 45%; margin-right: 8px"
                            />
                            <el-button size="small" type="danger" @click="removeEditSelectOption(field.id, optIndex)">
                              <el-icon><Delete /></el-icon>
                            </el-button>
                          </div>
                          <el-button size="small" type="primary" @click="addEditSelectOption(field.id)">
                            <el-icon><Plus /></el-icon>
                            옵션 추가
                          </el-button>
                        </div>
                      </el-form-item>
                    </div>

                    <!-- 숫자/소수 타입일 때 범위 설정 -->
                    <div v-if="['number', 'float'].includes(editInputFieldsConfig[field.id].type)" class="number-constraints">
                      <el-row :gutter="16">
                        <el-col :span="8">
                          <el-form-item label="최소값" size="small">
                            <el-input 
                              v-model="editInputFieldsConfig[field.id].min" 
                              type="number"
                              placeholder="최소값"
                            />
                          </el-form-item>
                        </el-col>
                        <el-col :span="8">
                          <el-form-item label="최대값" size="small">
                            <el-input 
                              v-model="editInputFieldsConfig[field.id].max" 
                              type="number"
                              placeholder="최대값"
                            />
                          </el-form-item>
                        </el-col>
                        <el-col :span="8">
                          <el-form-item label="단계" size="small" v-if="editInputFieldsConfig[field.id].type === 'float'">
                            <el-input 
                              v-model="editInputFieldsConfig[field.id].step" 
                              type="number"
                              placeholder="0.1"
                            />
                          </el-form-item>
                        </el-col>
                      </el-row>
                    </div>

                    <el-form-item label="설명" size="small">
                      <el-input 
                        v-model="editInputFieldsConfig[field.id].description" 
                        type="textarea" 
                        :rows="2"
                        placeholder="사용자에게 표시될 필드 설명"
                      />
                    </el-form-item>

                    <el-form-item size="small">
                      <el-checkbox v-model="editInputFieldsConfig[field.id].required">필수 입력</el-checkbox>
                    </el-form-item>
                  </el-card>
                </div>
              </div>
            </el-card>
          </el-form-item>

          <el-form-item>
            <el-button type="primary" @click="saveEditWorkflow" :loading="loading.editWorkflow">
              <el-icon><Check /></el-icon>
              워크플로우 수정
            </el-button>
            <el-button @click="cancelEditWorkflow">취소</el-button>
          </el-form-item>
        </el-form>
      </div>
    </el-dialog>

    <!-- 워크플로우 생성 다이얼로그 -->
    <el-dialog v-model="showCreateWorkflowDialog" title="새 워크플로우 생성" width="90%" top="3vh">
      <div class="create-workflow-content">
        <el-form :model="newWorkflow" :rules="workflowFormRules" ref="newWorkflowFormRef" label-width="120px">
          <el-form-item label="워크플로우명" prop="name">
            <el-input 
              v-model="newWorkflow.name" 
              placeholder="워크플로우 이름을 입력하세요"
              maxlength="255"
              show-word-limit
            />
          </el-form-item>

          <el-form-item label="설명" prop="description">
            <el-input 
              v-model="newWorkflow.description" 
              type="textarea" 
              :rows="3"
              placeholder="워크플로우 설명을 입력하세요 (선택사항)"
              maxlength="500"
              show-word-limit
            />
          </el-form-item>

          <el-form-item label="워크플로우 데이터" prop="workflow_data">
            <div class="json-editor-container">
              <div class="json-editor-header">
                <span>ComfyUI JSON 데이터</span>
                <div class="json-actions">
                  <el-button size="small" @click="formatWorkflowJSON">
                    <el-icon><Document /></el-icon>
                    포맷팅
                  </el-button>
                  <el-button size="small" @click="validateWorkflowJSON">
                    <el-icon><CircleCheck /></el-icon>
                    검증
                  </el-button>
                  <el-button size="small" @click="pasteWorkflowFromClipboard">
                    <el-icon><CopyDocument /></el-icon>
                    클립보드에서 붙여넣기
                  </el-button>
                  <el-button size="small" @click="triggerFileUpload">
                    <el-icon><Upload /></el-icon>
                    파일 선택
                  </el-button>
                </div>
              </div>
              
              <!-- 드래그앤드롭 영역 -->
              <div 
                class="json-drop-zone"
                :class="{ 'is-dragover': isDragOver }"
                @drop="handleFileDrop"
                @dragover.prevent="handleDragOver"
                @dragenter.prevent="handleDragEnter"
                @dragleave="handleDragLeave"
              >
                <el-input 
                  v-model="workflowJsonText" 
                  type="textarea" 
                  :rows="12"
                  placeholder='{"prompt": {...}, "nodes": {...}} 형식의 ComfyUI 워크플로우 JSON을 입력하거나 JSON 파일을 드래그하세요'
                  class="json-editor"
                  @input="onWorkflowJsonInput"
                />
                
                <!-- 드래그 오버레이 -->
                <div v-if="isDragOver" class="drag-overlay">
                  <div class="drag-content">
                    <el-icon class="drag-icon"><Upload /></el-icon>
                    <p>JSON 파일을 여기에 놓으세요</p>
                  </div>
                </div>
              </div>
              
              <!-- 숨겨진 파일 입력 -->
              <input 
                ref="fileInputRef"
                type="file" 
                accept=".json"
                style="display: none"
                @change="handleFileSelect"
              />
              
              <div class="json-status" :class="workflowJsonValidationStatus.type">
                <el-icon v-if="workflowJsonValidationStatus.type === 'success'"><CircleCheck /></el-icon>
                <el-icon v-else-if="workflowJsonValidationStatus.type === 'error'"><CircleClose /></el-icon>
                <el-icon v-else><Warning /></el-icon>
                <span>{{ workflowJsonValidationStatus.message }}</span>
              </div>
            </div>
          </el-form-item>

          <!-- 입력 필드 설정 섹션 -->
          <el-form-item>
            <el-card class="input-fields-card">
              <template #header>
                <div class="card-header">
                  <span>입력 필드 설정</span>
                  <div class="field-controls">
                    <el-tag type="info" size="small">{{ manualInputFields.length }}개 필드</el-tag>
                    <el-button size="small" type="primary" @click="addInputField">
                      <el-icon><Plus /></el-icon>
                      입력 필드 추가
                    </el-button>
                  </div>
                </div>
              </template>

              <div class="input-fields-list">
                <div v-if="manualInputFields.length === 0" class="no-fields-message">
                  <el-empty description="입력 필드가 없습니다">
                    <template #image>
                      <el-icon size="60"><DocumentAdd /></el-icon>
                    </template>
                    <el-button type="primary" @click="addInputField">첫 번째 입력 필드 추가</el-button>
                  </el-empty>
                </div>
                
                <div v-for="(field, index) in manualInputFields" :key="field.id" class="input-field-item">
                  <el-card class="field-config-card">
                    <template #header>
                      <div class="field-header">
                        <div class="field-id-section">
                          <el-tag type="success">{{ field.id }}</el-tag>
                          <el-button 
                            size="small" 
                            type="info" 
                            text 
                            @click="copyFieldId(field.id)"
                            title="field-id 복사"
                          >
                            <el-icon><DocumentCopy /></el-icon>
                          </el-button>
                        </div>
                        <el-button size="small" type="danger" @click="removeInputField(index)">
                          <el-icon><Delete /></el-icon>
                        </el-button>
                      </div>
                    </template>

                    <el-row :gutter="16">
                      <el-col :span="8">
                        <el-form-item label="필드명" size="small">
                          <el-input 
                            v-model="inputFieldsConfig[field.id].label" 
                            placeholder="사용자에게 표시될 필드명"
                          />
                        </el-form-item>
                      </el-col>
                      
                      <el-col :span="8">
                        <el-form-item label="입력 타입" size="small">
                          <el-select 
                            v-model="inputFieldsConfig[field.id].type" 
                            @change="onFieldTypeChange(field.id)"
                          >
                            <el-option label="텍스트" value="text" />
                            <el-option label="텍스트 박스" value="textarea" />
                            <el-option label="숫자" value="number" />
                            <el-option label="소수" value="float" />
                            <el-option label="선택" value="select" />
                          </el-select>
                        </el-form-item>
                      </el-col>
                      
                      <el-col :span="8">
                        <el-form-item label="기본값" size="small">
                          <el-input 
                            v-if="inputFieldsConfig[field.id].type !== 'select'"
                            v-model="inputFieldsConfig[field.id].defaultValue" 
                            :type="getInputType(inputFieldsConfig[field.id].type)"
                            placeholder="기본값 입력"
                          />
                          <el-select 
                            v-else
                            v-model="inputFieldsConfig[field.id].defaultValue"
                            placeholder="기본 선택값"
                          >
                            <el-option 
                              v-for="option in inputFieldsConfig[field.id].options" 
                              :key="option.value" 
                              :label="option.label" 
                              :value="option.value"
                            />
                          </el-select>
                        </el-form-item>
                      </el-col>
                    </el-row>

                    <!-- Select 타입일 때 옵션 설정 -->
                    <div v-if="inputFieldsConfig[field.id].type === 'select'" class="select-options">
                      <el-form-item label="선택 옵션" size="small">
                        <div class="options-list">
                          <div v-for="(option, optIndex) in inputFieldsConfig[field.id].options" :key="optIndex" class="option-item">
                            <el-input 
                              v-model="option.label" 
                              placeholder="표시명" 
                              style="width: 45%; margin-right: 8px"
                            />
                            <el-input 
                              v-model="option.value" 
                              placeholder="값" 
                              style="width: 45%; margin-right: 8px"
                            />
                            <el-button size="small" type="danger" @click="removeSelectOption(field.id, optIndex)">
                              <el-icon><Delete /></el-icon>
                            </el-button>
                          </div>
                          <el-button size="small" type="primary" @click="addSelectOption(field.id)">
                            <el-icon><Plus /></el-icon>
                            옵션 추가
                          </el-button>
                        </div>
                      </el-form-item>
                    </div>

                    <!-- 숫자/소수 타입일 때 범위 설정 -->
                    <div v-if="['number', 'float'].includes(inputFieldsConfig[field.id].type)" class="number-constraints">
                      <el-row :gutter="16">
                        <el-col :span="8">
                          <el-form-item label="최소값" size="small">
                            <el-input 
                              v-model="inputFieldsConfig[field.id].min" 
                              type="number"
                              placeholder="최소값"
                            />
                          </el-form-item>
                        </el-col>
                        <el-col :span="8">
                          <el-form-item label="최대값" size="small">
                            <el-input 
                              v-model="inputFieldsConfig[field.id].max" 
                              type="number"
                              placeholder="최대값"
                            />
                          </el-form-item>
                        </el-col>
                        <el-col :span="8">
                          <el-form-item label="단계" size="small" v-if="inputFieldsConfig[field.id].type === 'float'">
                            <el-input 
                              v-model="inputFieldsConfig[field.id].step" 
                              type="number"
                              placeholder="0.1"
                            />
                          </el-form-item>
                        </el-col>
                      </el-row>
                    </div>

                    <el-form-item label="설명" size="small">
                      <el-input 
                        v-model="inputFieldsConfig[field.id].description" 
                        type="textarea" 
                        :rows="2"
                        placeholder="사용자에게 표시될 필드 설명"
                      />
                    </el-form-item>

                    <el-form-item size="small">
                      <el-checkbox v-model="inputFieldsConfig[field.id].required">필수 입력</el-checkbox>
                    </el-form-item>
                  </el-card>
                </div>
              </div>
            </el-card>
          </el-form-item>

          <el-form-item>
            <el-button type="primary" @click="createWorkflowAdmin" :loading="loading.createWorkflow">
              <el-icon><Plus /></el-icon>
              워크플로우 생성
            </el-button>
            <el-button @click="cancelCreateWorkflow">취소</el-button>
          </el-form-item>
        </el-form>
      </div>
    </el-dialog>

    <!-- 사용자 생성 다이얼로그 -->
    <el-dialog v-model="showCreateUserDialog" title="새 사용자 생성" width="500px">
      <el-form :model="newUser" :rules="userRules" ref="newUserFormRef" label-width="100px">
        <el-form-item label="사용자명" prop="username">
          <el-input v-model="newUser.username" />
        </el-form-item>
        <el-form-item label="이메일" prop="email">
          <el-input v-model="newUser.email" />
        </el-form-item>
        <el-form-item label="비밀번호" prop="password">
          <el-input v-model="newUser.password" type="password" />
        </el-form-item>
        <el-form-item label="역할">
          <el-select v-model="newUser.role">
            <el-option label="사용자" value="user" />
            <el-option label="관리자" value="admin" />
          </el-select>
        </el-form-item>
        <el-form-item label="즉시 승인">
          <el-switch v-model="newUser.is_approved" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="showCreateUserDialog = false">취소</el-button>
        <el-button type="primary" @click="createUser">생성</el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script>
import { ref, reactive, onMounted, watch } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import axios from 'axios'

export default {
  name: 'Admin',
  setup() {
    const activeTab = ref('stats')
    const showEditUserDialog = ref(false)
    const showCreateUserDialog = ref(false)
    const showCreateWorkflowDialog = ref(false)
    const newUserFormRef = ref()
    const newWorkflowFormRef = ref()
     const fileInputRef = ref()
     const isDragOver = ref(false)
     const editFileInputRef = ref()
     const editIsDragOver = ref(false)

    const loading = reactive({
      users: false,
      workflows: false,
      executions: false,
      createWorkflow: false,
      editWorkflow: false
    })

    const stats = reactive({
      total_users: 0,
      approved_users: 0,
      pending_users: 0,
      total_workflows: 0,
      total_executions: 0,
      completed_executions: 0,
      failed_executions: 0,
      server_status: 'running'
    })

    const users = ref([])
    const workflows = ref([])
    const executions = ref([])
    
    // 워크플로우 관리 관련 데이터
    const workflowSearch = ref('')
    const workflowStatusFilter = ref('')
    const filteredWorkflows = ref([])
    const selectedWorkflows = ref([])
    const showWorkflowDetailDialog = ref(false)
    const selectedWorkflowDetail = ref(null)
    const workflowExecutions = ref([])
    
    // 워크플로우 수정 관련 데이터
    const showEditWorkflowDialog = ref(false)
    const editWorkflow = reactive({
      id: null,
      name: '',
      description: '',
      workflow_data: {},
      input_fields: {}
    })
    const editWorkflowFormRef = ref(null)
    const editWorkflowJsonText = ref('')
    const editWorkflowJsonValidationStatus = reactive({
      type: 'info',
      message: 'JSON 데이터를 입력하세요'
    })
    const editManualInputFields = ref([])
    const editInputFieldsConfig = reactive({})
    const workflowPagination = reactive({
      currentPage: 1,
      pageSize: 10,
      total: 0
    })

    const editingUser = reactive({
      id: null,
      username: '',
      email: '',
      role: 'user',
      is_approved: false
    })

    const newUser = reactive({
      username: '',
      email: '',
      password: '',
      role: 'user',
      is_approved: false
    })

         const newWorkflow = reactive({
       name: '',
       description: '',
       workflow_data: {},
       input_fields: {}
     })

     const workflowJsonText = ref('')
     const workflowJsonValidationStatus = reactive({
       type: 'info',
       message: 'JSON 데이터를 입력하세요'
     })

     // 입력 필드 관련 데이터 (수동 생성 방식)
     const manualInputFields = ref([])  // 수동으로 추가한 입력 필드들
     const inputFieldsConfig = reactive({})

    const userRules = {
      username: [
        { required: true, message: '사용자명을 입력해주세요', trigger: 'blur' }
      ],
      email: [
        { required: true, message: '이메일을 입력해주세요', trigger: 'blur' },
        { type: 'email', message: '올바른 이메일 형식이 아닙니다', trigger: 'blur' }
      ],
      password: [
        { required: true, message: '비밀번호를 입력해주세요', trigger: 'blur' },
        { min: 6, message: '비밀번호는 최소 6자 이상이어야 합니다', trigger: 'blur' }
      ]
    }

    const workflowFormRules = {
      name: [
        { required: true, message: '워크플로우명을 입력해주세요', trigger: 'blur' },
        { min: 2, max: 255, message: '2-255자 사이로 입력해주세요', trigger: 'blur' }
      ],
      workflow_data: [
        { 
          validator: (rule, value, callback) => {
            if (!workflowJsonText.value.trim()) {
              callback(new Error('워크플로우 JSON 데이터를 입력해주세요'))
            } else if (workflowJsonValidationStatus.type === 'error') {
              callback(new Error('유효한 JSON 형식이 아닙니다'))
            } else {
              callback()
            }
          }, 
          trigger: 'blur' 
        }
      ]
    }

         onMounted(() => {
       loadStats()
       loadUsers()
       loadWorkflows()
       loadExecutions()
     })

    const loadStats = async () => {
      try {
        const response = await axios.get('/api/admin/stats')
        Object.assign(stats, response.data)
      } catch (error) {
        console.error('통계 로드 오류:', error)
        ElMessage.error('통계를 불러오는 중 오류가 발생했습니다.')
      }
    }

    const loadUsers = async () => {
      loading.users = true
      try {
        const response = await axios.get('/api/admin/users')
        users.value = response.data
      } catch (error) {
        console.error('사용자 목록 로드 오류:', error)
        ElMessage.error('사용자 목록을 불러오는 중 오류가 발생했습니다.')
      } finally {
        loading.users = false
      }
    }

    const loadWorkflows = async () => {
      loading.workflows = true
      try {
        const response = await axios.get('/api/admin/workflows')
        workflows.value = response.data.map(workflow => ({
          ...workflow,
          owner: workflow.username || '알 수 없음',
          executions_count: workflow.executions_count || 0,
          last_executed: workflow.last_executed,
          success_rate: workflow.success_rate || '0%'
        }))
        workflowPagination.total = workflows.value.length
        filterWorkflows()
      } catch (error) {
        console.error('워크플로우 목록 로드 오류:', error)
        ElMessage.error('워크플로우 목록을 불러오는 중 오류가 발생했습니다.')
      } finally {
        loading.workflows = false
      }
    }

    const loadExecutions = async () => {
      loading.executions = true
      try {
        const response = await axios.get('/api/admin/executions')
        executions.value = response.data
      } catch (error) {
        console.error('실행 기록 로드 오류:', error)
        ElMessage.error('실행 기록을 불러오는 중 오류가 발생했습니다.')
      } finally {
        loading.executions = false
      }
    }

    const editUser = (user) => {
      Object.assign(editingUser, user)
      showEditUserDialog.value = true
    }

    const saveUserChanges = async () => {
      try {
        await axios.put(`/api/admin/users/${editingUser.id}`, {
          role: editingUser.role,
          is_approved: editingUser.is_approved
        })
        ElMessage.success('사용자 정보가 업데이트되었습니다.')
        showEditUserDialog.value = false
        loadUsers()
        loadStats()
      } catch (error) {
        console.error('사용자 업데이트 오류:', error)
        ElMessage.error('사용자 정보 업데이트 중 오류가 발생했습니다.')
      }
    }

    const deleteUser = async (user) => {
      try {
        await ElMessageBox.confirm(
          `사용자 "${user.username}"을(를) 삭제하시겠습니까?`,
          '사용자 삭제',
          {
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            type: 'warning'
          }
        )

        await axios.delete(`/api/admin/users/${user.id}`)
        ElMessage.success('사용자가 삭제되었습니다.')
        loadUsers()
        loadStats()
      } catch (error) {
        if (error !== 'cancel') {
          console.error('사용자 삭제 오류:', error)
          ElMessage.error('사용자 삭제 중 오류가 발생했습니다.')
        }
      }
    }

    const createUser = async () => {
      if (!newUserFormRef.value) return

      const valid = await newUserFormRef.value.validate().catch(() => false)
      if (!valid) return

      try {
        await axios.post('/api/admin/users', newUser)
        ElMessage.success('새 사용자가 생성되었습니다.')
        showCreateUserDialog.value = false
        
        // 폼 초기화
        Object.assign(newUser, {
          username: '',
          email: '',
          password: '',
          role: 'user',
          is_approved: false
        })
        
        loadUsers()
        loadStats()
      } catch (error) {
        console.error('사용자 생성 오류:', error)
        ElMessage.error('사용자 생성 중 오류가 발생했습니다.')
      }
    }

    const deleteWorkflow = async (workflowId) => {
      try {
        await ElMessageBox.confirm(
          '이 워크플로우를 삭제하시겠습니까?',
          '워크플로우 삭제',
          {
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            type: 'warning'
          }
        )

        await axios.delete(`/api/admin/workflows/${workflowId}`)
        ElMessage.success('워크플로우가 삭제되었습니다.')
        loadWorkflows()
        loadStats()
      } catch (error) {
        if (error !== 'cancel') {
          console.error('워크플로우 삭제 오류:', error)
          ElMessage.error('워크플로우 삭제 중 오류가 발생했습니다.')
        }
      }
    }

    const deleteExecution = async (executionId) => {
      try {
        await ElMessageBox.confirm(
          '이 실행 기록을 삭제하시겠습니까?',
          '실행 기록 삭제',
          {
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            type: 'warning'
          }
        )

        await axios.delete(`/api/admin/executions/${executionId}`)
        ElMessage.success('실행 기록이 삭제되었습니다.')
        loadExecutions()
        loadStats()
      } catch (error) {
        if (error !== 'cancel') {
          console.error('실행 기록 삭제 오류:', error)
          ElMessage.error('실행 기록 삭제 중 오류가 발생했습니다.')
        }
      }
    }

    // 워크플로우 관리 메서드들
    const filterWorkflows = () => {
      let filtered = workflows.value

      // 검색어 필터링
      if (workflowSearch.value) {
        const searchTerm = workflowSearch.value.toLowerCase()
        filtered = filtered.filter(workflow => 
          workflow.name.toLowerCase().includes(searchTerm) ||
          workflow.description?.toLowerCase().includes(searchTerm) ||
          workflow.owner.toLowerCase().includes(searchTerm)
        )
      }

      // 상태 필터링 (향후 확장용)
      if (workflowStatusFilter.value) {
        // 현재는 상태 필터링 로직 없음
      }

      filteredWorkflows.value = filtered
    }

    const handleWorkflowSelection = (selection) => {
      selectedWorkflows.value = selection
    }

    const viewWorkflowDetails = async (workflow) => {
      try {
        selectedWorkflowDetail.value = workflow
        
        // 워크플로우의 실행 기록 로드
        const executionsResponse = await axios.get(`/api/admin/workflows/${workflow.id}/executions`)
        workflowExecutions.value = executionsResponse.data || []
        
        showWorkflowDetailDialog.value = true
      } catch (error) {
        console.error('워크플로우 상세 정보 로드 오류:', error)
        ElMessage.error('워크플로우 상세 정보를 불러올 수 없습니다.')
      }
    }

    

    const bulkDeleteWorkflows = async () => {
      if (selectedWorkflows.value.length === 0) return

      try {
        await ElMessageBox.confirm(
          `선택된 ${selectedWorkflows.value.length}개의 워크플로우를 삭제하시겠습니까?`,
          '일괄 삭제',
          {
            confirmButtonText: '삭제',
            cancelButtonText: '취소',
            type: 'warning'
          }
        )

        const workflowIds = selectedWorkflows.value.map(w => w.id)
        await axios.delete('/api/admin/workflows/bulk', {
          data: { workflow_ids: workflowIds }
        })
        
        ElMessage.success(`${workflowIds.length}개의 워크플로우가 삭제되었습니다.`)
        selectedWorkflows.value = []
        loadWorkflows()
        loadStats()
      } catch (error) {
        if (error !== 'cancel') {
          console.error('일괄 삭제 오류:', error)
          ElMessage.error('워크플로우 일괄 삭제 중 오류가 발생했습니다.')
        }
      }
    }

    

    const copyWorkflowData = () => {
      if (!selectedWorkflowDetail.value?.workflow_data) return

      const jsonData = JSON.stringify(selectedWorkflowDetail.value.workflow_data, null, 2)
      navigator.clipboard.writeText(jsonData)
        .then(() => {
          ElMessage.success('워크플로우 JSON 데이터가 클립보드에 복사되었습니다.')
        })
        .catch(() => {
          ElMessage.error('클립보드 복사에 실패했습니다.')
        })
    }

    // 워크플로우 생성 관련 메서드들
    const onWorkflowJsonInput = () => {
      validateWorkflowJSON()
    }

         const validateWorkflowJSON = () => {
       try {
         if (!workflowJsonText.value.trim()) {
           workflowJsonValidationStatus.type = 'info'
           workflowJsonValidationStatus.message = 'JSON 데이터를 입력하세요'
           newWorkflow.workflow_data = {}
           return
         }

         const parsed = JSON.parse(workflowJsonText.value)
         newWorkflow.workflow_data = parsed
         
         workflowJsonValidationStatus.type = 'success'
         workflowJsonValidationStatus.message = `유효한 JSON (${Object.keys(parsed).length}개 키, ${manualInputFields.value.length}개 입력 필드)`
       } catch (error) {
         workflowJsonValidationStatus.type = 'error'
         workflowJsonValidationStatus.message = `JSON 오류: ${error.message}`
       }
     }

     // UUID 생성 함수
     const generateUUID = () => {
       return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
         const r = Math.random() * 16 | 0
         const v = c == 'x' ? r : (r & 0x3 | 0x8)
         return v.toString(16)
       })
     }

     // 수동 입력 필드 추가
     const addInputField = () => {
       const fieldId = `input-field-${generateUUID()}`
       const newField = {
         id: fieldId,
         label: '새 입력 필드',
         type: 'text',
         defaultValue: '',
         description: '',
         required: false,
         options: [], // select용
         min: '', // number/float용
         max: '', // number/float용
         step: '0.1' // float용
       }
       
       manualInputFields.value.push(newField)
       inputFieldsConfig[fieldId] = newField
       
       ElMessage.success(`입력 필드가 추가되었습니다: ${fieldId}`)
     }

     // 입력 필드 제거
     const removeInputField = (index) => {
       const field = manualInputFields.value[index]
       if (field) {
         delete inputFieldsConfig[field.id]
         manualInputFields.value.splice(index, 1)
         ElMessage.success('입력 필드가 제거되었습니다')
       }
     }

     // field-id를 클립보드에 복사
     const copyFieldId = (fieldId) => {
       navigator.clipboard.writeText(fieldId).then(() => {
         ElMessage.success(`field-id가 클립보드에 복사되었습니다: ${fieldId}`)
       }).catch(() => {
         ElMessage.error('클립보드 복사에 실패했습니다')
       })
     }

     // 입력 필드 설정 초기화
     const clearInputFieldsConfig = () => {
       Object.keys(inputFieldsConfig).forEach(key => {
         delete inputFieldsConfig[key]
       })
       manualInputFields.value = []
     }

     // 필드 타입 변경 핸들러
     const onFieldTypeChange = (placeholder) => {
       const config = inputFieldsConfig[placeholder]
       
       // 타입별 기본값 설정
       if (config.type === 'select' && config.options.length === 0) {
         config.options = [
           { label: '옵션 1', value: 'option1' },
           { label: '옵션 2', value: 'option2' }
         ]
         config.defaultValue = ''
       } else if (config.type === 'number') {
         config.defaultValue = '0'
       } else if (config.type === 'float') {
         config.defaultValue = '0.0'
         config.step = '0.1'
       } else {
         config.defaultValue = ''
       }
     }

     // 선택 옵션 추가
     const addSelectOption = (placeholder) => {
       const optionCount = inputFieldsConfig[placeholder].options.length + 1
       inputFieldsConfig[placeholder].options.push({
         label: `옵션 ${optionCount}`,
         value: `option${optionCount}`
       })
     }

     // 선택 옵션 제거
     const removeSelectOption = (placeholder, index) => {
       inputFieldsConfig[placeholder].options.splice(index, 1)
     }



     // 입력 타입에 따른 HTML input type 반환
     const getInputType = (fieldType) => {
       switch (fieldType) {
         case 'number':
         case 'float':
           return 'number'
         case 'textarea':
           return 'text'
         default:
           return 'text'
       }
     }

    const formatWorkflowJSON = () => {
      if (!workflowJsonText.value.trim()) return
      
      try {
        const parsed = JSON.parse(workflowJsonText.value)
        workflowJsonText.value = JSON.stringify(parsed, null, 2)
        validateWorkflowJSON()
        ElMessage.success('JSON이 포맷팅되었습니다.')
      } catch (error) {
        ElMessage.error('유효하지 않은 JSON입니다.')
      }
    }

         const pasteWorkflowFromClipboard = async () => {
       try {
         const text = await navigator.clipboard.readText()
         workflowJsonText.value = text
         validateWorkflowJSON()
         ElMessage.success('클립보드에서 데이터를 가져왔습니다.')
       } catch (error) {
         ElMessage.error('클립보드 접근에 실패했습니다.')
       }
     }

     // 드래그앤드롭 관련 메서드들
     const handleDragEnter = (e) => {
       e.preventDefault()
       isDragOver.value = true
     }

     const handleDragOver = (e) => {
       e.preventDefault()
       isDragOver.value = true
     }

     const handleDragLeave = (e) => {
       // 드래그 영역을 완전히 벗어났을 때만 상태 변경
       if (!e.currentTarget.contains(e.relatedTarget)) {
         isDragOver.value = false
       }
     }

     const handleFileDrop = (e) => {
       e.preventDefault()
       isDragOver.value = false
       
       const files = e.dataTransfer.files
       if (files.length > 0) {
         const file = files[0]
         if (file.type === 'application/json' || file.name.endsWith('.json')) {
           readJsonFile(file)
         } else {
           ElMessage.error('JSON 파일만 업로드할 수 있습니다.')
         }
       }
     }

     const triggerFileUpload = () => {
       fileInputRef.value?.click()
     }

     const handleFileSelect = (e) => {
       const file = e.target.files[0]
       if (file) {
         readJsonFile(file)
       }
       // 파일 입력 초기화
       e.target.value = ''
     }

     const readJsonFile = (file) => {
       const reader = new FileReader()
       reader.onload = (e) => {
         try {
           const content = e.target.result
           // JSON 유효성 검사
           JSON.parse(content)
           workflowJsonText.value = content
           validateWorkflowJSON()
           ElMessage.success(`파일 "${file.name}"이 성공적으로 로드되었습니다.`)
         } catch (error) {
           ElMessage.error('유효하지 않은 JSON 파일입니다.')
         }
       }
       reader.onerror = () => {
         ElMessage.error('파일을 읽는 중 오류가 발생했습니다.')
       }
       reader.readAsText(file)
     }

     // 수정 다이얼로그용 드래그앤드롭 메서드들
     const handleEditDragEnter = (e) => {
       e.preventDefault()
       editIsDragOver.value = true
     }

     const handleEditDragOver = (e) => {
       e.preventDefault()
       editIsDragOver.value = true
     }

     const handleEditDragLeave = (e) => {
       // 드래그 영역을 완전히 벗어났을 때만 상태 변경
       if (!e.currentTarget.contains(e.relatedTarget)) {
         editIsDragOver.value = false
       }
     }

     const handleEditFileDrop = (e) => {
       e.preventDefault()
       editIsDragOver.value = false
       
       const files = e.dataTransfer.files
       if (files.length > 0) {
         const file = files[0]
         if (file.type === 'application/json' || file.name.endsWith('.json')) {
           readEditJsonFile(file)
         } else {
           ElMessage.error('JSON 파일만 업로드할 수 있습니다.')
         }
       }
     }

     const triggerEditFileUpload = () => {
       editFileInputRef.value?.click()
     }

     const handleEditFileSelect = (e) => {
       const file = e.target.files[0]
       if (file) {
         readEditJsonFile(file)
       }
       // 파일 입력 초기화
       e.target.value = ''
     }

     const readEditJsonFile = (file) => {
       const reader = new FileReader()
       reader.onload = (e) => {
         try {
           const content = e.target.result
           // JSON 유효성 검사
           JSON.parse(content)
           editWorkflowJsonText.value = content
           validateEditWorkflowJson()
           ElMessage.success(`파일 "${file.name}"이 성공적으로 로드되었습니다.`)
         } catch (error) {
           ElMessage.error('유효하지 않은 JSON 파일입니다.')
         }
       }
       reader.onerror = () => {
         ElMessage.error('파일을 읽는 중 오류가 발생했습니다.')
       }
       reader.readAsText(file)
     }

         const createWorkflowAdmin = async () => {
       if (!newWorkflowFormRef.value) return

       const valid = await newWorkflowFormRef.value.validate().catch(() => false)
       if (!valid) return

       loading.createWorkflow = true
       try {
         // 입력 필드 설정을 워크플로우 데이터에 포함
         newWorkflow.input_fields = { ...inputFieldsConfig }
         
         await axios.post('/api/admin/workflows', newWorkflow)
         ElMessage.success('워크플로우가 생성되었습니다.')
         
         // 폼 초기화
         resetWorkflowForm()
         
         showCreateWorkflowDialog.value = false
         loadWorkflows()
         loadStats()
       } catch (error) {
         console.error('워크플로우 생성 오류:', error)
         ElMessage.error('워크플로우 생성 중 오류가 발생했습니다.')
       } finally {
         loading.createWorkflow = false
       }
     }

     const resetWorkflowForm = () => {
       Object.assign(newWorkflow, {
         name: '',
         description: '',
         workflow_data: {},
         input_fields: {}
       })
       workflowJsonText.value = ''
       workflowJsonValidationStatus.type = 'info'
       workflowJsonValidationStatus.message = 'JSON 데이터를 입력하세요'
       clearInputFieldsConfig()
     }

         const cancelCreateWorkflow = () => {
       showCreateWorkflowDialog.value = false
       resetWorkflowForm()
     }

    const formatJSON = (data) => {
      if (!data) return '{}'
      try {
        return JSON.stringify(data, null, 2)
      } catch (error) {
        return '유효하지 않은 JSON 데이터'
      }
    }

    const handleWorkflowPageSizeChange = (pageSize) => {
      workflowPagination.pageSize = pageSize
      workflowPagination.currentPage = 1
      filterWorkflows()
    }

    const handleWorkflowPageChange = (page) => {
      workflowPagination.currentPage = page
      filterWorkflows()
    }

    const formatDate = (dateString) => {
      const date = new Date(dateString)
      return date.toLocaleDateString('ko-KR', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    }

    const getStatusType = (status) => {
      const statusMap = {
        'pending': '',
        'running': 'warning',
        'completed': 'success',
        'failed': 'danger'
      }
      return statusMap[status] || 'info'
    }

    const getStatusText = (status) => {
      const statusMap = {
        'pending': '대기 중',
        'running': '실행 중',
        'completed': '완료',
        'failed': '실패'
      }
      return statusMap[status] || status
    }

         // 입력 필드 타입 관련 메서드들
     const getFieldTypeLabel = (type) => {
       const typeLabels = {
         'text': '텍스트',
         'textarea': '텍스트 박스',
         'number': '숫자',
         'float': '소수',
         'select': '선택'
       }
       return typeLabels[type] || type
     }

     const getFieldTypeColor = (type) => {
       const typeColors = {
         'text': 'primary',
         'textarea': 'success',
         'number': 'warning',
         'float': 'danger',
         'select': 'info'
       }
       return typeColors[type] || 'primary'
     }

     // 워크플로우 검색어 변경 감지
     watch(workflowSearch, () => {
       filterWorkflows()
     })

     watch(workflowStatusFilter, () => {
       filterWorkflows()
     })

    // 워크플로우 수정 관련 메서드들
    const editWorkflowHandler = (workflow) => {
      // 수정할 워크플로우 데이터를 폼에 복사
      editWorkflow.id = workflow.id
      editWorkflow.name = workflow.name
      editWorkflow.description = workflow.description || ''
      editWorkflow.workflow_data = workflow.workflow_data
      editWorkflow.input_fields = workflow.input_fields || {}
      
      // JSON 텍스트 설정
      editWorkflowJsonText.value = JSON.stringify(workflow.workflow_data, null, 2)
      
      // 입력 필드 설정 복사
      editManualInputFields.value = []
      Object.keys(editInputFieldsConfig).forEach(key => {
        delete editInputFieldsConfig[key]
      })
      
      if (workflow.input_fields) {
        Object.keys(workflow.input_fields).forEach(fieldId => {
          const fieldConfig = workflow.input_fields[fieldId]
          const newField = {
            id: fieldId,
            label: fieldConfig.label || fieldId,
            type: fieldConfig.type || 'text',
            defaultValue: fieldConfig.defaultValue || '',
            description: fieldConfig.description || '',
            required: fieldConfig.required || false,
            options: fieldConfig.options || [],
            min: fieldConfig.min || '',
            max: fieldConfig.max || '',
            step: fieldConfig.step || '0.1'
          }
          
          editManualInputFields.value.push(newField)
          editInputFieldsConfig[fieldId] = newField
        })
      }
      
      // 유효성 검사 초기화
      editWorkflowJsonValidationStatus.type = 'success'
      editWorkflowJsonValidationStatus.message = `유효한 JSON (${Object.keys(workflow.workflow_data).length}개 키, ${editManualInputFields.value.length}개 입력 필드)`
      
      showEditWorkflowDialog.value = true
    }

    const validateEditWorkflowJson = () => {
      try {
        if (!editWorkflowJsonText.value.trim()) {
          editWorkflowJsonValidationStatus.type = 'info'
          editWorkflowJsonValidationStatus.message = 'JSON 데이터를 입력하세요'
          editWorkflow.workflow_data = {}
          return
        }

        const parsed = JSON.parse(editWorkflowJsonText.value)
        editWorkflow.workflow_data = parsed
        
        editWorkflowJsonValidationStatus.type = 'success'
        editWorkflowJsonValidationStatus.message = `유효한 JSON (${Object.keys(parsed).length}개 키, ${editManualInputFields.value.length}개 입력 필드)`
      } catch (error) {
        editWorkflowJsonValidationStatus.type = 'error'
        editWorkflowJsonValidationStatus.message = `JSON 오류: ${error.message}`
      }
    }

    const formatEditJson = () => {
      if (!editWorkflowJsonText.value.trim()) return
      
      try {
        const parsed = JSON.parse(editWorkflowJsonText.value)
        editWorkflowJsonText.value = JSON.stringify(parsed, null, 2)
        validateEditWorkflowJson()
        ElMessage.success('JSON이 포맷팅되었습니다.')
      } catch (error) {
        ElMessage.error('유효하지 않은 JSON입니다.')
      }
    }

    const validateEditJson = () => {
      try {
        JSON.parse(editWorkflowJsonText.value)
        ElMessage.success('유효한 JSON입니다.')
      } catch (error) {
        ElMessage.error(`JSON 유효성 검사 실패: ${error.message}`)
      }
    }

    const copyEditToClipboard = () => {
      navigator.clipboard.writeText(editWorkflowJsonText.value)
        .then(() => {
          ElMessage.success('JSON이 클립보드에 복사되었습니다.')
        })
        .catch(() => {
          ElMessage.error('클립보드 복사에 실패했습니다.')
        })
    }

    const handleEditJsonFileChange = (file) => {
      const reader = new FileReader()
      reader.onload = (e) => {
        try {
          const jsonData = JSON.parse(e.target.result)
          editWorkflowJsonText.value = JSON.stringify(jsonData, null, 2)
          validateEditWorkflowJson()
          ElMessage.success('JSON 파일이 업로드되었습니다.')
        } catch (error) {
          ElMessage.error('유효하지 않은 JSON 파일입니다.')
        }
      }
      reader.readAsText(file.raw)
    }

    const addEditInputField = () => {
      const fieldId = `input-field-${generateUUID()}`
      const newField = {
        id: fieldId,
        label: '새 입력 필드',
        type: 'text',
        defaultValue: '',
        description: '',
        required: false,
        options: [],
        min: '',
        max: '',
        step: '0.1'
      }
      
      editManualInputFields.value.push(newField)
      editInputFieldsConfig[fieldId] = newField
      
      ElMessage.success(`입력 필드가 추가되었습니다: ${fieldId}`)
    }

    const removeEditInputField = (index) => {
      const field = editManualInputFields.value[index]
      if (field) {
        delete editInputFieldsConfig[field.id]
        editManualInputFields.value.splice(index, 1)
        ElMessage.success('입력 필드가 제거되었습니다')
      }
    }

    const copyEditFieldId = (fieldId) => {
      navigator.clipboard.writeText(fieldId)
        .then(() => {
          ElMessage.success('Field ID가 클립보드에 복사되었습니다.')
        })
        .catch(() => {
          ElMessage.error('클립보드 복사에 실패했습니다.')
        })
    }

    const addEditSelectOption = (fieldId) => {
      if (!editInputFieldsConfig[fieldId].options) {
        editInputFieldsConfig[fieldId].options = []
      }
      editInputFieldsConfig[fieldId].options.push({
        label: '',
        value: ''
      })
    }

    const removeEditSelectOption = (fieldId, optionIndex) => {
      editInputFieldsConfig[fieldId].options.splice(optionIndex, 1)
    }

    const onEditFieldTypeChange = (fieldId) => {
      const field = editInputFieldsConfig[fieldId]
      if (field.type === 'select' && !field.options) {
        field.options = []
      }
      if (field.type === 'number' || field.type === 'float') {
        field.min = ''
        field.max = ''
        if (field.type === 'float') {
          field.step = '0.1'
        }
      }
    }

    const getEditInputType = (fieldType) => {
      switch (fieldType) {
        case 'number':
        case 'float':
          return 'number'
        case 'textarea':
          return 'textarea'
        default:
          return 'text'
      }
    }

    const saveEditWorkflow = async () => {
      try {
        // JSON 유효성 검사
        const workflowData = JSON.parse(editWorkflowJsonText.value)
        
        loading.editWorkflow = true
        
        const updateData = {
          name: editWorkflow.name,
          description: editWorkflow.description,
          workflow_data: workflowData,
          input_fields: editInputFieldsConfig
        }

        await axios.put(`/api/admin/workflows/${editWorkflow.id}`, updateData)
        
        ElMessage.success('워크플로우가 수정되었습니다.')
        showEditWorkflowDialog.value = false
        loadWorkflows()
        
      } catch (error) {
        console.error('워크플로우 수정 오류:', error)
        
        if (error.name === 'SyntaxError') {
          ElMessage.error('유효하지 않은 JSON입니다. JSON 형식을 확인해주세요.')
        } else if (error.response?.status === 404) {
          ElMessage.error('워크플로우를 찾을 수 없습니다.')
        } else if (error.response?.status === 403) {
          ElMessage.error('워크플로우 수정 권한이 없습니다.')
        } else {
          ElMessage.error('워크플로우 수정 중 오류가 발생했습니다.')
        }
      } finally {
        loading.editWorkflow = false
      }
    }

    const cancelEditWorkflow = () => {
      showEditWorkflowDialog.value = false
      // 폼 초기화
      editWorkflow.id = null
      editWorkflow.name = ''
      editWorkflow.description = ''
      editWorkflow.workflow_data = {}
      editWorkflow.input_fields = {}
      editWorkflowJsonText.value = ''
      editWorkflowJsonValidationStatus.type = 'info'
      editWorkflowJsonValidationStatus.message = 'JSON 데이터를 입력하세요'
      editManualInputFields.value = []
      Object.keys(editInputFieldsConfig).forEach(key => {
        delete editInputFieldsConfig[key]
      })
    }

    return {
      activeTab,
      loading,
      stats,
      users,
      workflows,
      executions,
      
      // 워크플로우 관리 관련
      workflowSearch,
      workflowStatusFilter,
      filteredWorkflows,
      selectedWorkflows,
      showWorkflowDetailDialog,
      selectedWorkflowDetail,
      workflowExecutions,
      workflowPagination,
      
      // 워크플로우 수정 관련
      showEditWorkflowDialog,
      editWorkflow,
      editWorkflowFormRef,
      editWorkflowJsonText,
      editWorkflowJsonValidationStatus,
      editManualInputFields,
      editInputFieldsConfig,
      
             // 워크플로우 생성 관련
       showCreateWorkflowDialog,
       newWorkflow,
       workflowJsonText,
       workflowJsonValidationStatus,
       workflowFormRules,
             newWorkflowFormRef,
      fileInputRef,
      isDragOver,
      editFileInputRef,
      editIsDragOver,
       
       // 입력 필드 관련
       manualInputFields,
       inputFieldsConfig,
      
      showEditUserDialog,
      showCreateUserDialog,
      editingUser,
      newUser,
      userRules,
      newUserFormRef,
      loadUsers,
      loadWorkflows,
      loadExecutions,
      editUser,
      saveUserChanges,
      deleteUser,
      createUser,
      deleteWorkflow,
      deleteExecution,
      
             // 워크플로우 관리 메서드들
       filterWorkflows,
       handleWorkflowSelection,
       viewWorkflowDetails,
       bulkDeleteWorkflows,
       copyWorkflowData,
       formatJSON,
       handleWorkflowPageSizeChange,
       handleWorkflowPageChange,
       
       // 워크플로우 수정 메서드들
       editWorkflowHandler,
       validateEditWorkflowJson,
       formatEditJson,
       validateEditJson,
       copyEditToClipboard,
       handleEditJsonFileChange,
       addEditInputField,
       removeEditInputField,
       copyEditFieldId,
       addEditSelectOption,
       removeEditSelectOption,
       onEditFieldTypeChange,
       getEditInputType,
       saveEditWorkflow,
       cancelEditWorkflow,
      
             // 워크플로우 생성 메서드들
       onWorkflowJsonInput,
       validateWorkflowJSON,
       formatWorkflowJSON,
       pasteWorkflowFromClipboard,
       createWorkflowAdmin,
       cancelCreateWorkflow,
       resetWorkflowForm,
       
       // 입력 필드 관련 메서드들
       generateUUID,
       addInputField,
       removeInputField,
       copyFieldId,
       clearInputFieldsConfig,
       onFieldTypeChange,
       addSelectOption,
       removeSelectOption,
       getInputType,
       
       // 드래그앤드롭 관련 메서드들
       handleDragEnter,
       handleDragOver,
       handleDragLeave,
       handleFileDrop,
       triggerFileUpload,
       handleFileSelect,
       readJsonFile,
       
       // 수정 다이얼로그용 드래그앤드롭 메서드들
       handleEditDragEnter,
       handleEditDragOver,
       handleEditDragLeave,
       handleEditFileDrop,
       triggerEditFileUpload,
       handleEditFileSelect,
       readEditJsonFile,
      
             formatDate,
       getStatusType,
       getStatusText,
       getFieldTypeLabel,
       getFieldTypeColor
    }
  }
}
</script>

<style scoped>
.admin-page {
  padding: 0;
}

.admin-header {
  margin-bottom: 24px;
}

.admin-header h1 {
  margin: 0 0 8px 0;
  color: #303133;
  font-size: 28px;
  font-weight: bold;
}

.admin-header p {
  margin: 0;
  color: #909399;
  font-size: 16px;
}

.admin-tabs {
  margin-top: 20px;
}

.stats-section {
  padding: 20px 0;
}

.stats-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin-bottom: 24px;
}

.stat-card {
  border-radius: 8px;
}

.stat-content {
  display: flex;
  align-items: center;
  gap: 16px;
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  color: white;
}

.stat-icon.users { background: #409eff; }
.stat-icon.approved { background: #67c23a; }
.stat-icon.pending { background: #e6a23c; }
.stat-icon.workflows { background: #909399; }
.stat-icon.executions { background: #f56c6c; }

.stat-info {
  flex: 1;
}

.stat-value {
  font-size: 24px;
  font-weight: bold;
  color: #303133;
  line-height: 1;
}

.stat-label {
  font-size: 14px;
  color: #909399;
  margin-top: 4px;
}

.section-header {
  margin-bottom: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: nowrap;
  gap: 16px;
}

.search-controls {
  display: flex;
  align-items: center;
  gap: 10px;
  flex-shrink: 1;
  min-width: 0;
}

.action-controls {
  display: flex;
  align-items: center;
  gap: 6px;
  flex-shrink: 0;
  white-space: nowrap;
  min-height: 32px;
  overflow: visible; /* 배지가 잘리지 않도록 오버플로우 허용 */
}

.workflow-name-cell {
  display: flex;
  align-items: center;
  gap: 8px;
}

.workflow-name {
  font-weight: 500;
}

.owner-cell {
  display: flex;
  align-items: center;
}

.json-viewer {
  max-height: 400px;
  overflow-y: auto;
}

.json-content {
  background: #f5f7fa;
  border: 1px solid #dcdfe6;
  border-radius: 4px;
  padding: 12px;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 12px;
  line-height: 1.4;
  color: #2c3e50;
  white-space: pre-wrap;
  word-break: break-all;
}

.stat-item {
  text-align: center;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 8px;
}

.stat-item .stat-number {
  font-size: 20px;
  font-weight: bold;
  color: #409eff;
  margin-bottom: 4px;
}

.stat-item .stat-label {
  font-size: 12px;
  color: #666;
}

.bulk-action-buttons {
  display: flex;
  align-items: center;
  gap: 8px;
  animation: fadeInRight 0.3s ease-in-out;
  padding-right: 12px; /* 배지가 잘리지 않도록 우측 여백 추가 */
}

/* 선택 삭제 버튼의 배지 스타일 개선 */
.bulk-action-buttons .el-badge {
  position: relative;
  overflow: visible;
}

.bulk-action-buttons .el-badge__content {
  position: absolute;
  transform: translateY(-50%) translateX(50%);
  right: -8px !important;
  top: 0 !important;
  z-index: 10;
  white-space: nowrap;
  min-width: 18px;
  padding: 1px 6px;
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.default-action-buttons {
  display: flex;
  align-items: center;
  gap: 6px;
}

.workflow-actions {
  display: flex;
  align-items: center;
  gap: 4px;
  justify-content: center;
  flex-wrap: nowrap;
  padding: 4px 0;
}

.workflow-actions .el-button {
  min-width: 60px;
  font-size: 12px;
}

.pagination-wrapper {
  border-top: 1px solid #ebeef5;
  padding-top: 16px;
}

.workflow-detail-content {
  max-height: 70vh;
  overflow-y: auto;
}

.users-section,
.workflows-section,
.executions-section {
  padding: 20px 0;
}



.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.json-editor-container {
  width: 100%;
}

.json-editor-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 8px;
}

.json-actions {
  display: flex;
  gap: 8px;
}

.json-editor {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 13px;
}

.json-status {
  display: flex;
  align-items: center;
  gap: 6px;
  margin-top: 8px;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 12px;
}

.json-status.success {
  background: #f0f9ff;
  color: #67c23a;
  border: 1px solid #c2e7b0;
}

.json-status.error {
  background: #fef0f0;
  color: #f56c6c;
  border: 1px solid #fbc4c4;
}

.json-status.info {
  background: #f4f4f5;
  color: #909399;
  border: 1px solid #dcdfe6;
}

/* 드래그앤드롭 스타일 */
.json-drop-zone {
  position: relative;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.json-drop-zone.is-dragover {
  border: 2px dashed #409eff;
  background-color: rgba(64, 158, 255, 0.1);
}

.drag-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(64, 158, 255, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  z-index: 10;
  pointer-events: none;
}

.drag-content {
  text-align: center;
  color: white;
}

.drag-icon {
  font-size: 48px;
  margin-bottom: 16px;
}

.drag-content p {
  font-size: 16px;
  margin: 0;
  font-weight: 500;
}

.badge-container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 12px 8px;
  min-height: 40px;
}

/* 테이블 행 높이 및 오버플로우 설정 */
.el-table .el-table__row {
  height: auto;
  min-height: 60px;
}

.el-table .el-table__cell {
  overflow: visible;
  padding: 8px 0;
}

/* Badge 위치 조정 */
.el-badge {
  vertical-align: middle;
}

 .el-badge__content {
   transform: translateY(-50%) translateX(50%);
   top: 50% !important;
 }

/* 입력 필드 설정 스타일 */
.input-fields-card {
  border: 1px solid #e4e7ed;
  border-radius: 8px;
  margin-top: 16px;
}

.input-fields-list {
  max-height: 600px;
  overflow-y: auto;
}

.input-field-item {
  margin-bottom: 16px;
}

.input-field-item:last-child {
  margin-bottom: 0;
}

.field-config-card {
  border: 1px solid #f0f0f0;
  border-radius: 6px;
}

.field-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.field-header .el-tag {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 12px;
  background-color: #f5f7fa;
  color: #409eff;
  border: 1px solid #409eff;
}

.select-options {
  background-color: #fafbfc;
  padding: 12px;
  border-radius: 4px;
  border: 1px solid #e4e7ed;
  margin-top: 8px;
}

.options-list {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.option-item {
  display: flex;
  align-items: center;
  gap: 8px;
}

.number-constraints {
  background-color: #f8f9fa;
  padding: 12px;
  border-radius: 4px;
  border: 1px solid #e4e7ed;
  margin-top: 8px;
}

/* 카드 헤더 스타일 개선 */
.input-fields-card .card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: 600;
  color: #303133;
}

 .input-fields-card .card-header .el-tag {
   background-color: #ecf5ff;
   color: #409eff;
   border: 1px solid #b3d8ff;
 }

/* 워크플로우 상세의 입력 필드 정보 스타일 */
.input-fields-info {
  padding: 16px 0;
}

.field-list {
  display: grid;
  gap: 12px;
}

.field-item {
  width: 100%;
}

.field-card {
  border: 1px solid #e4e7ed;
  border-radius: 6px;
}

.field-info {
  padding: 8px;
}

.field-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.field-controls {
  display: flex;
  align-items: center;
  gap: 12px;
}

.field-id-section {
  display: flex;
  align-items: center;
  gap: 8px;
}

.field-id-section .el-tag {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 11px;
  max-width: 200px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.no-fields-message {
  padding: 20px;
  text-align: center;
}

.field-header .el-tag:first-child {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 11px;
  background-color: #f5f7fa;
  color: #409eff;
  border: 1px solid #409eff;
}

.field-details {
  font-size: 13px;
  line-height: 1.5;
}

.field-details p {
  margin: 4px 0;
  color: #303133;
}

.field-details strong {
  color: #606266;
  font-weight: 600;
}

.select-options-display,
.number-constraints-display {
  margin-top: 8px;
  padding: 8px;
  background-color: #f8f9fa;
  border-radius: 4px;
  border: 1px solid #e4e7ed;
}

.options-tags {
  margin-top: 4px;
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
}

.options-tags .el-tag {
  font-size: 11px;
}
</style> 